#pragma once

#include "NativeType.h"

namespace Graphics
{

enum RenderQueue
{
  RQ_GEOMETRY_BEGIN,
  RQ_BACKGROUND = RQ_GEOMETRY_BEGIN,
  RQ_GEOMETRY,
  RQ_ALPHA_TEST,
  RQ_GEOMETRY_LAST,
  RQ_TRANSPARENT = RQ_GEOMETRY_LAST,
  RQ_OVERLAY,

  RQ_DATANUM,
};

enum VertexAttribute
{
  V_ATTR_POSITION = 1 << 0,
  V_ATTR_NORMAL = 1 << 1,
  V_ATTR_UV = 1 << 2,
  V_ATTR_UV2 = 1 << 3,
  V_ATTR_UV3 = 1 << 4,
  V_ATTR_UV4 = 1 << 5,
  V_ATTR_TANGENT = 1 << 6,
  V_ATTR_COLOR = 1 << 7,
  V_ATTR_BONE_WEIGHTS = 1 << 8,
};

enum VertexAttrSize
{
  V_ATTRSIZE_POSITION = 3 * sizeof(T_FLOAT),
  V_ATTRSIZE_NORMAL = 3 * sizeof(T_FLOAT),
  V_ATTRSIZE_UV = 2 * sizeof(T_FLOAT),
  V_ATTRSIZE_UV2 = 2 * sizeof(T_FLOAT),
  V_ATTRSIZE_UV3 = 2 * sizeof(T_FLOAT),
  V_ATTRSIZE_UV4 = 2 * sizeof(T_FLOAT),
  V_ATTRSIZE_TANGENT = 4 * sizeof(T_FLOAT),
  V_ATTRSIZE_COLOR = 1 * sizeof(T_UINT32),
  V_ATTRSIZE_BONE_WEIGHTS = 8 * sizeof(T_FLOAT),
};

enum { V_ATTR_DATANUM = 8 };

enum VertexFormat
{
  V_FORMAT_P = V_ATTR_POSITION,
  V_FORMAT_PN = V_ATTR_POSITION | V_ATTR_NORMAL,
  V_FORMAT_PU = V_ATTR_POSITION | V_ATTR_UV,
  V_FORMAT_PNU = V_ATTR_POSITION | V_ATTR_NORMAL | V_ATTR_UV,

  V_FORMAT_PC = V_ATTR_POSITION | V_ATTR_COLOR,
  V_FORMAT_PNC = V_ATTR_POSITION | V_ATTR_NORMAL | V_ATTR_COLOR,
  V_FORMAT_PUC = V_ATTR_POSITION | V_ATTR_UV | V_ATTR_COLOR,
  V_FORMAT_PNUC = V_ATTR_POSITION | V_ATTR_NORMAL | V_ATTR_UV | V_ATTR_COLOR,

  V_FORMAT_PNT = V_ATTR_POSITION | V_ATTR_NORMAL | V_ATTR_TANGENT,
  V_FORMAT_PNUT = V_ATTR_POSITION | V_ATTR_NORMAL | V_ATTR_UV | V_ATTR_TANGENT,
  V_FORMAT_PNTC = V_ATTR_POSITION | V_ATTR_NORMAL | V_ATTR_TANGENT | V_ATTR_COLOR,
  V_FORMAT_PNUTC = V_ATTR_POSITION | V_ATTR_NORMAL | V_ATTR_UV | V_ATTR_TANGENT | V_ATTR_COLOR,
};

enum PrimitiveType
{
  PRIMITIVE_POINTS,
  PRIMITIVE_LINES,
  PRIMITIVE_LINESTRIP,
  PRIMITIVE_TRIANGLES,
  PRIMITIVE_TRIANGLESTRIP,
  PRIMITIVE_TRIANGLEFAN,

  PRIMITIVE_DATANUM,
};

static T_UINT32 PRIMITIVE_SURF_NUM(PrimitiveType type, T_UINT32 vertex_count)
{
  if (type == PRIMITIVE_POINTS)
  {
    return vertex_count;
  }
  if (type == PRIMITIVE_LINES)
  {
    return vertex_count;
  }
  if (type == PRIMITIVE_LINESTRIP)
  {
    return vertex_count;
  }
  if (type == PRIMITIVE_TRIANGLES)
  {
    return vertex_count / 3;
  }
  if (type == PRIMITIVE_TRIANGLESTRIP)
  {
    return vertex_count - 2;
  }
  if (type == PRIMITIVE_TRIANGLEFAN)
  {
    return vertex_count - 2;
  }
  return vertex_count;
}

}