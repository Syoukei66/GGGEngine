#pragma once
// auto generated by CreateFuncBuilder

/*!
 * @brief GGObjectの初期化関数宣言
 * 引数0個バージョン
 */
#define GG_INIT_FUNC(Type)\
protected:\
  virtual bool Init()

/*!
 * @brief GGObjectの初期化関数実装
 * 引数0個バージョン
 */
#define GG_INIT_FUNC_IMPL(Type)\
bool Type::Init()

/*!
 * @brief GGObjectのCreateMethodを定義する
 * 引数0個バージョン
 */
#define GG_CREATE_FUNC(Type)\
public:\
  static UniqueRef<Type> Create()\
  {\
    Type* ret = new (std::nothrow) Type();\
    GG_ASSERT(ret != nullptr, #Type"::Create(""): インスタンスの生成に失敗しました");\
    if (!ret->Init())\
    {\
      GG_ASSERT(false, #Type"::Init(""): インスタンスの初期化に失敗しました");\
    }\
    return UniqueRef<Type>(ret);\
  }\
GG_INIT_FUNC(Type)

/*!
 * @brief GGObjectの初期化関数宣言
 * 引数1個バージョン
 */
#define GG_INIT_FUNC_1(Type, Arg0)\
protected:\
  virtual bool Init(Arg0)

/*!
 * @brief GGObjectの初期化関数実装
 * 引数1個バージョン
 */
#define GG_INIT_FUNC_IMPL_1(Type, Arg0)\
bool Type::Init(Arg0)

/*!
 * @brief GGObjectのCreateMethodを定義する
 * 引数1個バージョン
 */
#define GG_CREATE_FUNC_1(Type, Arg0)\
public:\
  static UniqueRef<Type> Create(Arg0 arg0)\
  {\
    Type* ret = new (std::nothrow) Type();\
    GG_ASSERT(ret != nullptr, #Type"::Create("#Arg0"): インスタンスの生成に失敗しました");\
    if (!ret->Init(arg0))\
    {\
      GG_ASSERT(false, #Type"::Init("#Arg0"): インスタンスの初期化に失敗しました");\
    }\
    return UniqueRef<Type>(ret);\
  }\
GG_INIT_FUNC_1(Type, Arg0 arg0)

/*!
 * @brief GGObjectの初期化関数宣言
 * 引数2個バージョン
 */
#define GG_INIT_FUNC_2(Type, Arg0, Arg1)\
protected:\
  virtual bool Init(Arg0, Arg1)

/*!
 * @brief GGObjectの初期化関数実装
 * 引数2個バージョン
 */
#define GG_INIT_FUNC_IMPL_2(Type, Arg0, Arg1)\
bool Type::Init(Arg0, Arg1)

/*!
 * @brief GGObjectのCreateMethodを定義する
 * 引数2個バージョン
 */
#define GG_CREATE_FUNC_2(Type, Arg0, Arg1)\
public:\
  static UniqueRef<Type> Create(Arg0 arg0, Arg1 arg1)\
  {\
    Type* ret = new (std::nothrow) Type();\
    GG_ASSERT(ret != nullptr, #Type"::Create("#Arg0", "#Arg1"): インスタンスの生成に失敗しました");\
    if (!ret->Init(arg0, arg1))\
    {\
      GG_ASSERT(false, #Type"::Init("#Arg0", "#Arg1"): インスタンスの初期化に失敗しました");\
    }\
    return UniqueRef<Type>(ret);\
  }\
GG_INIT_FUNC_2(Type, Arg0 arg0, Arg1 arg1)

/*!
 * @brief GGObjectの初期化関数宣言
 * 引数3個バージョン
 */
#define GG_INIT_FUNC_3(Type, Arg0, Arg1, Arg2)\
protected:\
  virtual bool Init(Arg0, Arg1, Arg2)

/*!
 * @brief GGObjectの初期化関数実装
 * 引数3個バージョン
 */
#define GG_INIT_FUNC_IMPL_3(Type, Arg0, Arg1, Arg2)\
bool Type::Init(Arg0, Arg1, Arg2)

/*!
 * @brief GGObjectのCreateMethodを定義する
 * 引数3個バージョン
 */
#define GG_CREATE_FUNC_3(Type, Arg0, Arg1, Arg2)\
public:\
  static UniqueRef<Type> Create(Arg0 arg0, Arg1 arg1, Arg2 arg2)\
  {\
    Type* ret = new (std::nothrow) Type();\
    GG_ASSERT(ret != nullptr, #Type"::Create("#Arg0", "#Arg1", "#Arg2"): インスタンスの生成に失敗しました");\
    if (!ret->Init(arg0, arg1, arg2))\
    {\
      GG_ASSERT(false, #Type"::Init("#Arg0", "#Arg1", "#Arg2"): インスタンスの初期化に失敗しました");\
    }\
    return UniqueRef<Type>(ret);\
  }\
GG_INIT_FUNC_3(Type, Arg0 arg0, Arg1 arg1, Arg2 arg2)

/*!
 * @brief GGObjectの初期化関数宣言
 * 引数4個バージョン
 */
#define GG_INIT_FUNC_4(Type, Arg0, Arg1, Arg2, Arg3)\
protected:\
  virtual bool Init(Arg0, Arg1, Arg2, Arg3)

/*!
 * @brief GGObjectの初期化関数実装
 * 引数4個バージョン
 */
#define GG_INIT_FUNC_IMPL_4(Type, Arg0, Arg1, Arg2, Arg3)\
bool Type::Init(Arg0, Arg1, Arg2, Arg3)

/*!
 * @brief GGObjectのCreateMethodを定義する
 * 引数4個バージョン
 */
#define GG_CREATE_FUNC_4(Type, Arg0, Arg1, Arg2, Arg3)\
public:\
  static UniqueRef<Type> Create(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)\
  {\
    Type* ret = new (std::nothrow) Type();\
    GG_ASSERT(ret != nullptr, #Type"::Create("#Arg0", "#Arg1", "#Arg2", "#Arg3"): インスタンスの生成に失敗しました");\
    if (!ret->Init(arg0, arg1, arg2, arg3))\
    {\
      GG_ASSERT(false, #Type"::Init("#Arg0", "#Arg1", "#Arg2", "#Arg3"): インスタンスの初期化に失敗しました");\
    }\
    return UniqueRef<Type>(ret);\
  }\
GG_INIT_FUNC_4(Type, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)

/*!
 * @brief GGObjectの初期化関数宣言
 * 引数5個バージョン
 */
#define GG_INIT_FUNC_5(Type, Arg0, Arg1, Arg2, Arg3, Arg4)\
protected:\
  virtual bool Init(Arg0, Arg1, Arg2, Arg3, Arg4)

/*!
 * @brief GGObjectの初期化関数実装
 * 引数5個バージョン
 */
#define GG_INIT_FUNC_IMPL_5(Type, Arg0, Arg1, Arg2, Arg3, Arg4)\
bool Type::Init(Arg0, Arg1, Arg2, Arg3, Arg4)

/*!
 * @brief GGObjectのCreateMethodを定義する
 * 引数5個バージョン
 */
#define GG_CREATE_FUNC_5(Type, Arg0, Arg1, Arg2, Arg3, Arg4)\
public:\
  static UniqueRef<Type> Create(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)\
  {\
    Type* ret = new (std::nothrow) Type();\
    GG_ASSERT(ret != nullptr, #Type"::Create("#Arg0", "#Arg1", "#Arg2", "#Arg3", "#Arg4"): インスタンスの生成に失敗しました");\
    if (!ret->Init(arg0, arg1, arg2, arg3, arg4))\
    {\
      GG_ASSERT(false, #Type"::Init("#Arg0", "#Arg1", "#Arg2", "#Arg3", "#Arg4"): インスタンスの初期化に失敗しました");\
    }\
    return UniqueRef<Type>(ret);\
  }\
GG_INIT_FUNC_5(Type, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)

/*!
 * @brief GGObjectの初期化関数宣言
 * 引数6個バージョン
 */
#define GG_INIT_FUNC_6(Type, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)\
protected:\
  virtual bool Init(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)

/*!
 * @brief GGObjectの初期化関数実装
 * 引数6個バージョン
 */
#define GG_INIT_FUNC_IMPL_6(Type, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)\
bool Type::Init(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)

/*!
 * @brief GGObjectのCreateMethodを定義する
 * 引数6個バージョン
 */
#define GG_CREATE_FUNC_6(Type, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)\
public:\
  static UniqueRef<Type> Create(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5)\
  {\
    Type* ret = new (std::nothrow) Type();\
    GG_ASSERT(ret != nullptr, #Type"::Create("#Arg0", "#Arg1", "#Arg2", "#Arg3", "#Arg4", "#Arg5"): インスタンスの生成に失敗しました");\
    if (!ret->Init(arg0, arg1, arg2, arg3, arg4, arg5))\
    {\
      GG_ASSERT(false, #Type"::Init("#Arg0", "#Arg1", "#Arg2", "#Arg3", "#Arg4", "#Arg5"): インスタンスの初期化に失敗しました");\
    }\
    return UniqueRef<Type>(ret);\
  }\
GG_INIT_FUNC_6(Type, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5)

/*!
 * @brief GGObjectの初期化関数宣言
 * 引数7個バージョン
 */
#define GG_INIT_FUNC_7(Type, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)\
protected:\
  virtual bool Init(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)

/*!
 * @brief GGObjectの初期化関数実装
 * 引数7個バージョン
 */
#define GG_INIT_FUNC_IMPL_7(Type, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)\
bool Type::Init(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)

/*!
 * @brief GGObjectのCreateMethodを定義する
 * 引数7個バージョン
 */
#define GG_CREATE_FUNC_7(Type, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)\
public:\
  static UniqueRef<Type> Create(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6)\
  {\
    Type* ret = new (std::nothrow) Type();\
    GG_ASSERT(ret != nullptr, #Type"::Create("#Arg0", "#Arg1", "#Arg2", "#Arg3", "#Arg4", "#Arg5", "#Arg6"): インスタンスの生成に失敗しました");\
    if (!ret->Init(arg0, arg1, arg2, arg3, arg4, arg5, arg6))\
    {\
      GG_ASSERT(false, #Type"::Init("#Arg0", "#Arg1", "#Arg2", "#Arg3", "#Arg4", "#Arg5", "#Arg6"): インスタンスの初期化に失敗しました");\
    }\
    return UniqueRef<Type>(ret);\
  }\
GG_INIT_FUNC_7(Type, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6)

/*!
 * @brief GGObjectの初期化関数宣言
 * 引数8個バージョン
 */
#define GG_INIT_FUNC_8(Type, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)\
protected:\
  virtual bool Init(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)

/*!
 * @brief GGObjectの初期化関数実装
 * 引数8個バージョン
 */
#define GG_INIT_FUNC_IMPL_8(Type, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)\
bool Type::Init(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)

/*!
 * @brief GGObjectのCreateMethodを定義する
 * 引数8個バージョン
 */
#define GG_CREATE_FUNC_8(Type, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)\
public:\
  static UniqueRef<Type> Create(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7)\
  {\
    Type* ret = new (std::nothrow) Type();\
    GG_ASSERT(ret != nullptr, #Type"::Create("#Arg0", "#Arg1", "#Arg2", "#Arg3", "#Arg4", "#Arg5", "#Arg6", "#Arg7"): インスタンスの生成に失敗しました");\
    if (!ret->Init(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7))\
    {\
      GG_ASSERT(false, #Type"::Init("#Arg0", "#Arg1", "#Arg2", "#Arg3", "#Arg4", "#Arg5", "#Arg6", "#Arg7"): インスタンスの初期化に失敗しました");\
    }\
    return UniqueRef<Type>(ret);\
  }\
GG_INIT_FUNC_8(Type, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7)

/*!
 * @brief GGObjectの初期化関数宣言
 * 引数9個バージョン
 */
#define GG_INIT_FUNC_9(Type, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)\
protected:\
  virtual bool Init(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)

/*!
 * @brief GGObjectの初期化関数実装
 * 引数9個バージョン
 */
#define GG_INIT_FUNC_IMPL_9(Type, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)\
bool Type::Init(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)

/*!
 * @brief GGObjectのCreateMethodを定義する
 * 引数9個バージョン
 */
#define GG_CREATE_FUNC_9(Type, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)\
public:\
  static UniqueRef<Type> Create(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7, Arg8 arg8)\
  {\
    Type* ret = new (std::nothrow) Type();\
    GG_ASSERT(ret != nullptr, #Type"::Create("#Arg0", "#Arg1", "#Arg2", "#Arg3", "#Arg4", "#Arg5", "#Arg6", "#Arg7", "#Arg8"): インスタンスの生成に失敗しました");\
    if (!ret->Init(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8))\
    {\
      GG_ASSERT(false, #Type"::Init("#Arg0", "#Arg1", "#Arg2", "#Arg3", "#Arg4", "#Arg5", "#Arg6", "#Arg7", "#Arg8"): インスタンスの初期化に失敗しました");\
    }\
    return UniqueRef<Type>(ret);\
  }\
GG_INIT_FUNC_9(Type, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7, Arg8 arg8)

