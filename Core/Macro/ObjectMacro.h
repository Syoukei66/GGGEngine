#pragma once

#include <Core/Macro/AssertMacro.h>

/*!
 * @brief コピー禁止のクラス内に記述する事で
 * デフォルトのコピーコンストラクタやムーブコンストラクタが
 * 生成されるのを防ぐ
 */
#define GG_NO_COPYABLE(Type)private:\
  Type(const Type&) = delete;\
  Type& operator = (const Type&) = delete;\
  Type(Type&&) = delete;\
  Type& operator = (Type&&) = delete

/*!
 * @brief シングルトンにしたいクラス内に記述する
 * GGGEngine内のシングルトンクラスを共通のフォーマットで記述するのが目的。
 * GetInstance()->が邪魔なので、基本的にstaticメソッドを使用。
 * staticメンバは持たず、staticなインスタンスを提供するSelf()アクセサを使用してメンバへアクセスする。
 * Self()メソッドは隠ぺいし、staticメソッドの内部でthisポインタの代わりに使用する
 */
#define GG_SINGLETON(Type) GG_NO_COPYABLE(Type);\
private:\
  static GG_INLINE Type& Self()\
  {\
    static Type self;\
    return self;\
  }\
private:\
\
  Type() = default;\
  ~Type() = default

/*!
 * @brief GGObjectを継承したクラス内に記述する必要がある。
 * GetObjectName()をoverrideするだけでもコンパイルは通るが、
 * ツールのサポートを受けたい場合はこのマクロを通して記述する事。
 */
#define GG_OBJECT_NAME(Name)public:\
  virtual GG_INLINE const char* GetObjectName() const override\
  {\
    return #Name;\
  }

/*!
 * @brief シリアライズ可能なクラス内に記述する
 */
#define GG_SERIALIZABLE(Type, ...)public:\
  template <class Archive>\
  void serialize(Archive& archive)

/*!
 * @brief Jsonへのシリアライズ可能なクラス内に記述する
 */
#define GG_JSONABLE(Type, ...)public:\
  template <class Archive>\
  void serialize(Archive& archive)

/*!
 * @brief GGObjectのデストラクタの宣言
 * CREATE_FUNC群とセットで使用する
 * 基本的にGGObject派生クラスではデストラクタを独自に宣言せずに
 * このマクロを通して宣言する事
 */
#define GG_DESTRUCT_FUNC(Type)protected:\
  virtual ~Type()\
  {\
    if (!Uninit())\
    {\
      GG_ASSERT(false, #Type"::Uninit(): インスタンスの解放に失敗しました");\
    }\
  }\
private:\
  bool Uninit()

 /*!
  * @brief GGObjectのデストラクタの実装
  * 基本的にGGObject派生クラスではデストラクタを独自に実装せずに
  * このマクロを通して実装する事
  */
#define GG_DESTRUCT_FUNC_IMPL(Type)bool Type::Uninit()

#include "ObjectMacro.AutoGenerated.h"
